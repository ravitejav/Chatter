{"version":3,"sources":["Firebase/FirebaseMessages.tsx","Components/MessageInput/index.tsx"],"names":["FirebaseMessaging","database","auth","this","FirebaseApp","ref","child","friendEmail","currentUser","email","getUserChatRef","getMessageId","groupId","getGroupChatRef","messageUpdater","getMessagePathToFriend","on","FIREBASE_VALUE","datasnapShot","error","callback","getGroupPath","groupMessages","messageDetails","update","timestamp","from","orderByValue","limitToLast","messages","friendEmailOrGroupId","chatType","USER_CHAT","uidExtractor","getMessageMetaDataPath","get","GROUP_CHAT","getMessageMetaDataPathForGroup","set","Date","getTime","MessageInput","activeUser","activeGroup","inputRef","useRef","extractAndSendMessage","inputEle","current","message","messager","undefined","sendMessage","then","catch","sendMessageToGroup","id","className","type","placeholder","onKeyPress","e","key","role","onClick","icon","faTelegramPlane"],"mappings":"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","file":"static/js/14.aab3f7ef.chunk.js","sourcesContent":["import firebase from 'firebase'\nimport { GROUP_CHAT, USER_CHAT } from '../Constants/DefaultValues'\nimport { FIREBASE_VALUE } from '../Constants/Firebase'\nimport { getMessageId, uidExtractor } from '../Helpers/CallBackHelper'\nimport { MessageType } from '../Models/Message'\n\nimport FirebaseApp from './FirebaseApp'\n\nexport class FirebaseMessaging {\n  private database: firebase.database.Database\n  private auth: firebase.auth.Auth\n\n  constructor() {\n    this.database = FirebaseApp.database()\n    this.auth = FirebaseApp.auth()\n  }\n\n  private getUserChatRef() {\n    return this.database.ref().child('userchats')\n  }\n\n  private getGroupChatRef() {\n    return this.database.ref().child('/groupchats')\n  }\n\n  private getMessagePathToFriend(friendEmail: string) {\n    const currentUser = this.auth.currentUser?.email || ''\n    return this.getUserChatRef().child(getMessageId(currentUser, friendEmail)).child('/messages/')\n  }\n\n  private getMessageMetaDataPath(friendEmail: string) {\n    const currentUser = this.auth.currentUser?.email || ''\n    return this.getUserChatRef().child(getMessageId(currentUser, friendEmail)).child('/metaData/')\n  }\n\n  private getGroupPath(groupId: string) {\n    return this.getGroupChatRef().child(groupId).child('/messages/')\n  }\n\n  private getMessageMetaDataPathForGroup(groupId: string) {\n    return this.getGroupChatRef().child(groupId).child('/metaData/')\n  }\n\n  public getMessagesOnce(friendEmail: string, messageUpdater: any) {\n    return this.getMessagePathToFriend(friendEmail).on(\n      FIREBASE_VALUE,\n      (datasnapShot) => messageUpdater(datasnapShot, friendEmail),\n      (error) => {\n        // handle error\n      }\n    )\n  }\n\n  public getMessagesForGroup(groupId: string, callback: any) {\n    this.getGroupPath(groupId).on('value', (groupMessages) => callback(groupMessages, groupId))\n  }\n\n  public sendMessage(friendEmail: string, messageDetails: MessageType) {\n    const currentUser = this.auth.currentUser?.email || ''\n    return this.getMessagePathToFriend(friendEmail).update({\n      [messageDetails.timestamp]: {\n        ...messageDetails,\n        from: currentUser,\n      },\n    })\n  }\n\n  public sendMessageToGroup(groupId: string, messageDetails: MessageType) {\n    const currentUser = this.auth.currentUser?.email || ''\n    return this.getGroupPath(groupId).update({\n      [messageDetails.timestamp]: {\n        ...messageDetails,\n        from: currentUser,\n      },\n    })\n  }\n\n  public getLastMessage(friendEmail: string, callback: any) {\n    return this.getMessagePathToFriend(friendEmail)\n      .orderByValue()\n      .limitToLast(1)\n      .on('value', (messages: firebase.database.DataSnapshot) => callback(friendEmail, messages))\n  }\n\n  public getLastMessageOfGroup(groupId: string, callback: any) {\n    return this.getGroupPath(groupId)\n      .orderByValue()\n      .limitToLast(1)\n      .on('value', (messages: firebase.database.DataSnapshot) => callback(groupId, messages))\n  }\n\n  public getLastReadTime(friendEmailOrGroupId: string, chatType: string = USER_CHAT) {\n    const currentUser = uidExtractor(this.auth.currentUser?.email || '')\n    if (chatType === USER_CHAT) {\n      return this.getMessageMetaDataPath(friendEmailOrGroupId)\n        .child('lastMessageReadTime')\n        .child(currentUser)\n        .get()\n    } else if (chatType === GROUP_CHAT) {\n      return this.getMessageMetaDataPathForGroup(friendEmailOrGroupId)\n        .child('lastMessageReadTime')\n        .child(currentUser)\n        .get()\n    }\n  }\n\n  public setLastReadTime(friendEmailOrGroupId: string, chatType: string = USER_CHAT) {\n    const currentUser = uidExtractor(this.auth.currentUser?.email || '')\n    if (chatType === USER_CHAT) {\n      return this.getMessageMetaDataPath(friendEmailOrGroupId)\n        .child('lastMessageReadTime')\n        .child(currentUser)\n        .set(new Date().getTime())\n    } else if (chatType === GROUP_CHAT) {\n      return this.getMessageMetaDataPathForGroup(friendEmailOrGroupId)\n        .child('lastMessageReadTime')\n        .child(currentUser)\n        .set(new Date().getTime())\n    }\n  }\n}\n","import { faTelegramPlane } from '@fortawesome/free-brands-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useRef } from 'react';\nimport { FirebaseMessaging } from '../../Firebase/FirebaseMessages';\nimport { MessageType } from '../../Models/Message';\nimport { MessagingProps } from '../../Models/MessagingModels';\nimport './MessageInput.css';\n\nconst MessageInput = ({ activeUser, activeGroup }: MessagingProps) => {\n\n    const inputRef = useRef(null);\n\n    const sendMessage = (message: string) => {\n        const messager = new FirebaseMessaging();\n        const messageDetails: MessageType = {\n            from: \"\",\n            message,\n            timestamp: new Date().getTime(),\n        }\n        if(message === '' || message === undefined || message === null) return;\n        if(activeUser) {\n            messager.sendMessage(activeUser?.email || '', messageDetails).then().catch();\n        }\n        if(activeGroup) {\n            messager.sendMessageToGroup(activeGroup.id, messageDetails).then().catch();\n        }\n    }\n\n    const onSend = (e: any) => {\n        if(e.key !== \"Enter\") return;\n        extractAndSendMessage();\n    }\n\n    const extractAndSendMessage = () => {\n        const inputEle: any = inputRef?.current;\n        const Message = inputEle && inputEle['value'];\n        sendMessage(Message);\n        if(inputEle) { inputEle['value'] = ''; }\n    }\n\n    return (\n        <div className=\"messageInputWrapper\">\n            <div className=\"inputWrapper\">\n                <input type=\"text\" placeholder=\"Type your message here....\" ref={inputRef} onKeyPress={onSend} />\n                <span className=\"sendicon\" role=\"button\" onClick={extractAndSendMessage}>\n                    <FontAwesomeIcon icon={faTelegramPlane} />\n                </span>\n            </div>\n        </div>\n    )\n}\n\nexport default MessageInput;"],"sourceRoot":""}