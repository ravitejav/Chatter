{"version":3,"sources":["Firebase/FirebaseMessages.tsx","Helpers/TimeStampHelper.tsx","Components/Messages/index.tsx"],"names":["FirebaseMessaging","database","auth","this","FirebaseApp","ref","child","friendEmail","currentUser","email","getUserChatRef","getMessageId","groupId","getGroupChatRef","messageUpdater","getMessagePathToFriend","on","FIREBASE_VALUE","datasnapShot","error","callback","getGroupPath","groupMessages","messageDetails","update","timestamp","from","orderByValue","limitToLast","messages","friendEmailOrGroupId","chatType","USER_CHAT","uidExtractor","getMessageMetaDataPath","get","GROUP_CHAT","getMessageMetaDataPathForGroup","set","Date","getTime","timeAgo","moment","fromNow","Messages","activeUser","activeGroup","useState","setMessages","useRef","snapshot","exists","arrivedMessages","val","Object","keys","length","receivedMessages","map","messageStamp","sort","a","b","useEffect","firebaseMessages","getMessagesOnce","id","getMessagesForGroup","meesageFetching","document","querySelector","scrollIntoView","firebaseUser","FirebaseUser","current","getCurrentUser","className","message","index"],"mappings":"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","file":"static/js/11.6d19af1a.chunk.js","sourcesContent":["import firebase from 'firebase'\nimport { GROUP_CHAT, USER_CHAT } from '../Constants/DefaultValues'\nimport { FIREBASE_VALUE } from '../Constants/Firebase'\nimport { getMessageId, uidExtractor } from '../Helpers/CallBackHelper'\nimport { MessageType } from '../Models/Message'\n\nimport FirebaseApp from './FirebaseApp'\n\nexport class FirebaseMessaging {\n  private database: firebase.database.Database\n  private auth: firebase.auth.Auth\n\n  constructor() {\n    this.database = FirebaseApp.database()\n    this.auth = FirebaseApp.auth()\n  }\n\n  private getUserChatRef() {\n    return this.database.ref().child('userchats')\n  }\n\n  private getGroupChatRef() {\n    return this.database.ref().child('/groupchats')\n  }\n\n  private getMessagePathToFriend(friendEmail: string) {\n    const currentUser = this.auth.currentUser?.email || ''\n    return this.getUserChatRef().child(getMessageId(currentUser, friendEmail)).child('/messages/')\n  }\n\n  private getMessageMetaDataPath(friendEmail: string) {\n    const currentUser = this.auth.currentUser?.email || ''\n    return this.getUserChatRef().child(getMessageId(currentUser, friendEmail)).child('/metaData/')\n  }\n\n  private getGroupPath(groupId: string) {\n    return this.getGroupChatRef().child(groupId).child('/messages/')\n  }\n\n  private getMessageMetaDataPathForGroup(groupId: string) {\n    return this.getGroupChatRef().child(groupId).child('/metaData/')\n  }\n\n  public getMessagesOnce(friendEmail: string, messageUpdater: any) {\n    return this.getMessagePathToFriend(friendEmail).on(\n      FIREBASE_VALUE,\n      (datasnapShot) => messageUpdater(datasnapShot, friendEmail),\n      (error) => {\n        // handle error\n      }\n    )\n  }\n\n  public getMessagesForGroup(groupId: string, callback: any) {\n    this.getGroupPath(groupId).on('value', (groupMessages) => callback(groupMessages, groupId))\n  }\n\n  public sendMessage(friendEmail: string, messageDetails: MessageType) {\n    const currentUser = this.auth.currentUser?.email || ''\n    return this.getMessagePathToFriend(friendEmail).update({\n      [messageDetails.timestamp]: {\n        ...messageDetails,\n        from: currentUser,\n      },\n    })\n  }\n\n  public sendMessageToGroup(groupId: string, messageDetails: MessageType) {\n    const currentUser = this.auth.currentUser?.email || ''\n    return this.getGroupPath(groupId).update({\n      [messageDetails.timestamp]: {\n        ...messageDetails,\n        from: currentUser,\n      },\n    })\n  }\n\n  public getLastMessage(friendEmail: string, callback: any) {\n    return this.getMessagePathToFriend(friendEmail)\n      .orderByValue()\n      .limitToLast(1)\n      .on('value', (messages: firebase.database.DataSnapshot) => callback(friendEmail, messages))\n  }\n\n  public getLastMessageOfGroup(groupId: string, callback: any) {\n    return this.getGroupPath(groupId)\n      .orderByValue()\n      .limitToLast(1)\n      .on('value', (messages: firebase.database.DataSnapshot) => callback(groupId, messages))\n  }\n\n  public getLastReadTime(friendEmailOrGroupId: string, chatType: string = USER_CHAT) {\n    const currentUser = uidExtractor(this.auth.currentUser?.email || '')\n    if (chatType === USER_CHAT) {\n      return this.getMessageMetaDataPath(friendEmailOrGroupId)\n        .child('lastMessageReadTime')\n        .child(currentUser)\n        .get()\n    } else if (chatType === GROUP_CHAT) {\n      return this.getMessageMetaDataPathForGroup(friendEmailOrGroupId)\n        .child('lastMessageReadTime')\n        .child(currentUser)\n        .get()\n    }\n  }\n\n  public setLastReadTime(friendEmailOrGroupId: string, chatType: string = USER_CHAT) {\n    const currentUser = uidExtractor(this.auth.currentUser?.email || '')\n    if (chatType === USER_CHAT) {\n      return this.getMessageMetaDataPath(friendEmailOrGroupId)\n        .child('lastMessageReadTime')\n        .child(currentUser)\n        .set(new Date().getTime())\n    } else if (chatType === GROUP_CHAT) {\n      return this.getMessageMetaDataPathForGroup(friendEmailOrGroupId)\n        .child('lastMessageReadTime')\n        .child(currentUser)\n        .set(new Date().getTime())\n    }\n  }\n}\n","import moment from 'moment'\n\nexport const timeAgo = (timestamp: number) => {\n  return timestamp ? moment(new Date(timestamp)).fromNow() : null\n}\n","import { useEffect, useRef, useState } from 'react';\nimport firebase from \"firebase\";\n\nimport { FirebaseMessaging } from '../../Firebase/FirebaseMessages';\nimport { MessageType } from '../../Models/Message';\nimport { MessagingProps } from '../../Models/MessagingModels';\n\nimport './Messages.css';\nimport { timeAgo } from '../../Helpers/TimeStampHelper';\nimport { UserTrimedData } from '../../Models/SearchUser';\nimport { FirebaseUser } from '../../Firebase/FirebaseUserDetails';\n\nconst Messages = ({ activeUser, activeGroup }: MessagingProps) => {\n\n    const [messages, setMessages] = useState([] as Array<MessageType>);\n    const currentUser = useRef({} as UserTrimedData);\n\n    const messageUpdater = (snapshot: firebase.database.DataSnapshot) => {\n        if (snapshot.exists()) {\n            const arrivedMessages = snapshot.val() || {};\n            if (Object.keys(arrivedMessages).length > 0) {\n                const receivedMessages = Object.keys(arrivedMessages).map(messageStamp => arrivedMessages[messageStamp]);\n                setMessages(receivedMessages.sort((a: MessageType, b: MessageType) => (a.timestamp - b.timestamp)));\n            }\n        }\n    }\n\n    const meesageFetching = () => {\n        const firebaseMessages = new FirebaseMessaging();\n        if(activeUser?.email) {\n            firebaseMessages.getMessagesOnce(activeUser?.email || '', messageUpdater);\n        } else if (activeGroup?.id) {\n            firebaseMessages.getMessagesForGroup(activeGroup.id || '', messageUpdater);\n        }\n    }\n\n    useEffect(() => {\n        setMessages([] as Array<MessageType>);\n        meesageFetching();\n    }, [activeUser, activeGroup]);\n\n    useEffect(() => {\n        document.querySelector<HTMLInputElement>('#activeMessage')?.scrollIntoView();\n     }, [messages]);\n\n     useEffect(() => {\n        const firebaseUser = new FirebaseUser();\n        currentUser.current = { ...(firebaseUser.getCurrentUser() as unknown as UserTrimedData) };\n     }, []);\n\n    return (\n        <div className=\"messageWrapper\">\n            <ul className=\"messagesList\">\n                {messages.map((message, index) => (\n                    <li \n                        className={message.from !== currentUser.current?.email ? \"moveLeft\" : \"moveRight\"} \n                        key={index} \n                        id={index === messages.length -1 ? \"activeMessage\" : \"\"}\n                    >\n                        <div className={message.from !== currentUser.current?.email ? \"sentByFriend\" : \"sentByMe\"}>\n                            {message.message}\n                        </div>\n                        <span className=\"timeago\">{timeAgo(message.timestamp)}</span>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default Messages;"],"sourceRoot":""}