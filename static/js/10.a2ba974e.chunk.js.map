{"version":3,"sources":["Helpers/DefaultHelper.tsx","Components/CreateNewGroup/index.tsx","Components/GroupChatList/index.tsx","Firebase/FirebaseMessages.tsx","Firebase/FirebaseGroup.tsx","Helpers/UserDataHelper.tsx","Components/SearchUser/index.tsx","Helpers/MessageHelper.tsx"],"names":["randomStringGen","length","mainString","randomString","i","randomNumberGen","min","max","Math","floor","random","CreateNewGroup","props","useState","groupName","setGroupName","userName","setUserName","TOAST_CONSTANT","toastDetails","setToastDetails","selectedUsers","setSelectedUsers","users","setUsers","useEffect","FirebaseUser","getLiveUpdateOfUser","resultsUsers","exists","trimExtraData","val","createGroup","a","uuid","UUID","NAMESPACE","firebaseGroup","FirebaseGroup","firebaseUser","id","name","userIdList","map","user","filter","then","hideCreateGroup","catch","err","ERROR_CONSTANT","NOT_ABLE_TO_CREATE_GROUP","forEach","selectedUser","updateUserGroupData","error","NOT_ABLE_SYNC","className","type","placeholder","onChange","e","target","value","Object","keys","userId","toLowerCase","includes","userData","onClick","addToSeletedUsers","email","userArray","JSON","parse","stringify","splice","removedFromSeletedUsers","hideAndOpenSearchGroup","icon","faSearch","faArrowLeft","Toaster","time","message","showToast","GroupChatList","createNew","setCreateNew","searchText","setSearchText","searchGroup","setSearchGroup","groups","setGroups","currentGroup","useRef","currentUser","setCurrentUser","newMessageCount","setNewMessageCount","latestMessages","setLatestMessages","userQuery","getCurrentUserData","liveUpdateOfUser","getGroups","handleGroups","firebaselive","FirebaseMessaging","current","setLastReadTime","GROUP_CHAT","firebaseMessaging","group","getLastMessageOfGroup","handleMessageUpdates","getMessagesForGroup","handleMessageCount","groupId","messages","oldLatestMessages","getLastReadTime","res","oldMessageCount","getCountOfLatestMessages","callBack","resetToast","liveUser","dbgroups","jsonToArray","shouldOpenSearch","faPlus","filterGroup","userGroup","setActiveGroup","setCurrentGroup","SearchUser","hideSearchPopUp","searchType","CREATE_GROUP","database","auth","this","FirebaseApp","ref","child","friendEmail","getUserChatRef","getMessageId","getGroupChatRef","messageUpdater","getMessagePathToFriend","on","FIREBASE_VALUE","datasnapShot","callback","getGroupPath","groupMessages","messageDetails","update","timestamp","from","orderByValue","limitToLast","friendEmailOrGroupId","chatType","USER_CHAT","uidExtractor","getMessageMetaDataPath","get","getMessageMetaDataPathForGroup","set","Date","getTime","firebaseDataBase","firebaseAuth","groupDetails","refForGroup","uid","getCurrentUser","extractSearchResults","searchResults","currentUserEmail","friends","friendId","ele","json","jsonKey","jsonValues","userObj","trimedUserData","userid","active","profileUrl","setSearchResults","isSearched","setIsSearched","userDetails","getAllUsers","WARNING_CONSTANT","MINIMUM_CHARS","index","src","alt","sendRequest","INFO_CONSTANT","FRIEND_REQ_SENT","FAILED_TO_SEND_REQ","faUserPlus","lastTime","lastReadTimeStamp","parseInt","AllMessages","count","messageKey"],"mappings":"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","file":"static/js/10.a2ba974e.chunk.js","sourcesContent":["export const randomStringGen = (length: number = 10) => {\n  const mainString = 'ASDFGHJKLPOIUYTREWQZXCVBNMasdfghjklpoiuytrewqzxcvbnm1234567890'\n  let randomString = ''\n  for (let i = 0; i < length; i++) randomString = randomString + mainString[randomNumberGen(i)]\n  return randomString\n}\n\nexport const randomNumberGen = (min: number = 0, max: number = 61) =>\n  Math.floor(Math.random() * max + min)\n","import { faArrowLeft, faSearch } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useEffect, useState } from 'react';\nimport firebase from 'firebase';\nimport { v5 as UUID } from \"uuid\";\n\nimport { ERROR_CONSTANT, NOT_ABLE_TO_CREATE_GROUP, TOAST_CONSTANT, NOT_ABLE_SYNC } from '../../Constants/ToasterContants';\nimport { FirebaseUser } from '../../Firebase/FirebaseUserDetails';\nimport { trimExtraData } from '../../Helpers/UserDataHelper';\nimport { CreateGroupProps } from '../../Models/CreateGroup';\nimport { UserTrimedData } from '../../Models/SearchUser';\nimport { toasterType } from '../../Models/ToasterModel';\nimport Toaster from '../Toaster';\nimport './CreateNewGroup.css';\nimport { NAMESPACE } from '../../Constants/DefaultValues';\nimport { FirebaseGroup } from '../../Firebase/FirebaseGroup';\nimport { randomStringGen } from '../../Helpers/DefaultHelper';\n\nexport const CreateNewGroup = (props: CreateGroupProps) => {\n\n    const [groupName, setGroupName] = useState('');\n    const [userName, setUserName] = useState('');\n    const [toastDetails, setToastDetails] = useState(TOAST_CONSTANT);\n    const [selectedUsers, setSelectedUsers] = useState([] as Array<UserTrimedData>);\n    const [users, setUsers] = useState([] as Array<UserTrimedData>);\n\n    useEffect(() => {\n        const userQuery = new FirebaseUser();\n        userQuery.getLiveUpdateOfUser((resultsUsers: firebase.database.DataSnapshot) => resultsUsers.exists() && setUsers(trimExtraData(resultsUsers.val())))\n    }, [])\n\n    const removedFromSeletedUsers = (i: number) => {\n        const userArray = JSON.parse(JSON.stringify(selectedUsers));\n        userArray.splice(i, 1)\n        setSelectedUsers(userArray);\n    }    \n\n    const createGroup = async () => {\n        const uuid = UUID(groupName + randomStringGen(), NAMESPACE);\n        const firebaseGroup = new FirebaseGroup();\n        const firebaseUser = new FirebaseUser();\n        firebaseGroup.createGroup({\n            id: uuid,\n            name: groupName,\n            userIdList: selectedUsers.map(user => user.id).filter(id => id != null),\n        }).then(() => props.hideCreateGroup()).catch(err => ERROR_CONSTANT(NOT_ABLE_TO_CREATE_GROUP));\n        selectedUsers.forEach((selectedUser: UserTrimedData) => {\n            firebaseUser.updateUserGroupData(selectedUser.id, uuid)\n                .then()\n                .catch(error => {\n                    setToastDetails(ERROR_CONSTANT(NOT_ABLE_SYNC))\n                });\n        })\n    }\n\n    const addToSeletedUsers = (user: UserTrimedData) => setSelectedUsers([...selectedUsers, user]);\n\n    // const resetToast = () => setToastDetails(TOAST_CONSTANT);\n\n    const shouldUserVisible = (user: UserTrimedData) => {\n        return user.name.toLowerCase().includes(userName.toLowerCase())\n                && userName.length >= 3 \n                && (selectedUsers.filter((userData: UserTrimedData) => userData.id === user.id).length === 0)\n    }\n\n    return (\n        <section className=\"createNewWrapper center\">\n            <div className=\"newGroup center\">\n                <div className=\"newGroupForm center\">\n                    <input type=\"text\" placeholder=\"Group Name...\" onChange={(e) => setGroupName(e.target.value)} />\n                    <input type=\"text\" placeholder=\"Search Users...\" onChange={(e) => setUserName(e.target.value)} />\n                    <div className=\"suggestions\">\n                        <div className=\"suggestedUsers\">\n                            {Object.keys(users).map((userId: any) => \n                                (shouldUserVisible(users[userId]) ? \n                                    (\n                                        <span className=\"button\" \n                                            onClick={() => addToSeletedUsers(users[userId])} \n                                            key={users[userId].id}\n                                        >\n                                            {users[userId].name}\n                                            <span>({users[userId].email})</span>\n                                        </span>\n                                    ) : null\n                                )\n                            )}\n                        </div>\n                    </div>\n                    <div className=\"selectedUsersList\">\n                        {selectedUsers.map((user: UserTrimedData, i: number) => (\n                            <div className=\"userDetails\" key={i}>\n                                <span>{user.name}</span>\n                                <span className=\"button\" onClick={() => removedFromSeletedUsers(i)}>X</span>\n                            </div>\n                        ))}\n                    </div>\n                    <div className=\"createGroupButton center button\" onClick={createGroup}>\n                        <p>Create Group</p>\n                    </div>\n                </div>\n                <div className=\"closeForm\">\n                    <div className=\"button searchButton\" onClick={props.hideAndOpenSearchGroup}>\n                        <FontAwesomeIcon icon={faSearch} />\n                        <span>Search Group</span>\n                    </div>\n                    <div className=\"button closeButton\" onClick={props.hideCreateGroup}>\n                        <FontAwesomeIcon icon={faArrowLeft} />\n                        <span>Close</span>\n                    </div>\n                </div>\n            </div>\n            <Toaster time={1} message={toastDetails.message} type={toastDetails.type as toasterType} showToast={toastDetails.showToast} />\n        </section>\n    );\n}","import { faPlus, faSearch } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useEffect, useRef, useState } from 'react';\nimport firebase from \"firebase\";\n\nimport { CREATE_GROUP, GROUP_CHAT } from '../../Constants/DefaultValues';\nimport { ERROR_CONSTANT, NOT_ABLE_SYNC, TOAST_CONSTANT } from '../../Constants/ToasterContants';\nimport { FirebaseGroup } from '../../Firebase/FirebaseGroup';\nimport { toasterType } from '../../Models/ToasterModel';\nimport { CreateNewGroup } from '../CreateNewGroup';\nimport SearchUser from '../SearchUser';\nimport Toaster from '../Toaster';\nimport { jsonToArray } from '../../Helpers/UserDataHelper';\nimport { GroupDetails } from '../../Models/CreateGroup';\nimport { FirebaseUser } from '../../Firebase/FirebaseUserDetails';\nimport './GroupChatList.css';\nimport { FirebaseMessaging } from '../../Firebase/FirebaseMessages';\nimport { getCountOfLatestMessages } from '../../Helpers/MessageHelper';\nimport { callBack } from '../../Helpers/CallBackHelper';\n\nconst GroupChatList = (props: { setActiveGroup: any }) => {\n\n    const [toastDetails, setToastDetails] = useState(TOAST_CONSTANT);\n    const [createNew, setCreateNew] = useState(false);\n    const [searchText, setSearchText] = useState('');\n    const [searchGroup, setSearchGroup] = useState(false);\n    const [groups, setGroups] = useState([] as Array<GroupDetails>);\n    const currentGroup = useRef({} as GroupDetails);\n    const [currentUser, setCurrentUser] = useState({} as any);\n    const [newMessageCount, setNewMessageCount] = useState({} as any)\n    const [latestMessages, setLatestMessages] = useState({} as any)\n\n\n    useEffect(() => {\n        const userQuery = new FirebaseUser();\n        const firebaseGroup = new FirebaseGroup();\n        userQuery.getCurrentUserData(liveUpdateOfUser);\n        firebaseGroup.getGroups(handleGroups)\n        return () => {\n            const firebaselive = new FirebaseMessaging()\n            if (currentGroup.current.id) {\n                firebaselive.setLastReadTime(currentGroup.current.id, GROUP_CHAT)?.then().catch();\n            }\n            currentGroup.current = {\n                id: '',\n                name: '',\n                userIdList: [],\n            };\n        };\n    }, []);\n\n    useEffect(() => {\n        const firebaseMessaging = new FirebaseMessaging();\n        groups.forEach((group: GroupDetails) => {\n            firebaseMessaging.getLastMessageOfGroup(group.id, handleMessageUpdates);\n            firebaseMessaging.getMessagesForGroup(group.id, handleMessageCount);\n        })\n    }, [groups])\n\n    const handleMessageUpdates = (groupId: string, messages: firebase.database.DataSnapshot) => {\n        if (messages.exists()) {\n            const message = messages.val()[Object.keys(messages.val())[0]];\n            setLatestMessages((oldLatestMessages: any) => ({\n                ...oldLatestMessages,\n                [groupId]: message?.message || '',\n            }))\n        }\n    }\n    \n    const handleMessageCount = (messages: firebase.database.DataSnapshot, groupId: string) => {\n        if (messages.exists()) {\n            const firebaselive = new FirebaseMessaging()\n            if (currentGroup.current?.id === groupId) {\n                firebaselive.setLastReadTime(groupId, GROUP_CHAT)?.then().catch();\n            } else {\n                firebaselive.getLastReadTime(groupId, GROUP_CHAT)?.then(res => {\n                    setNewMessageCount((oldMessageCount: any) => ({\n                        ...oldMessageCount,\n                        [groupId]: getCountOfLatestMessages(res.val(), messages),\n                    }))\n                }).catch(error => {\n                    setToastDetails(ERROR_CONSTANT(NOT_ABLE_SYNC))\n                    callBack(1, resetToast)\n                })\n            }\n        }\n    }\n\n    const resetMessageCount = (groupId: string) =>\n        setNewMessageCount({ ...newMessageCount, [groupId]: 0 })\n\n    const liveUpdateOfUser = (liveUser: firebase.database.DataSnapshot) => {\n        if (liveUser.exists()) {\n            setCurrentUser(liveUser.val());\n        }\n    }\n\n    const handleGroups = (dbgroups: firebase.database.DataSnapshot) => {\n        if (dbgroups.exists()) {\n            setGroups(jsonToArray(dbgroups.val()));\n        }\n    }\n\n    const resetToast = () => setToastDetails(TOAST_CONSTANT);\n\n    const hideAndOpenSearchGroup = (shouldOpenSearch: boolean) => {\n        setCreateNew(false);\n        setSearchGroup(shouldOpenSearch);\n    }\n\n    const setCurrentGroup = (group: GroupDetails) => {\n        if (currentGroup.current.id) {\n            const firebaseMessaging = new FirebaseMessaging()\n            firebaseMessaging.setLastReadTime(currentGroup.current.id, GROUP_CHAT);\n        }\n        currentGroup.current = group;\n        props.setActiveGroup(group);\n    }\n\n    return (\n        <section className=\"groupChatListWrapper\">\n            <div className=\"heading\">\n                <h1 className=\"naming center\">\n                    Group Chats\n                </h1>\n                <div className=\"createGroupbutton button\" onClick={() => setCreateNew(true)}>\n                    <FontAwesomeIcon icon={faPlus} />\n                    Create New Group\n                </div>\n            </div>\n            <div className=\"searchBar center\">\n                <FontAwesomeIcon icon={faSearch} />\n                <input type=\"search\" placeholder=\"Search for Group...\" onChange={(e) => setSearchText(e.target.value)} />\n            </div>\n            <div className=\"groupList\">\n                <ul>\n                    {groups\n                        .filter((filterGroup: GroupDetails) => currentUser.groups[filterGroup.id])\n                        .filter((userGroup: GroupDetails) =>\n                            searchText ? userGroup.name.toLowerCase().includes(searchText.toLowerCase()) : true\n                        )\n                        .map((group: GroupDetails) => (\n                            <li\n                                className={currentGroup.current.id === group.id ? \"button active\" : \"button\"}\n                                onClick={() => {\n                                    setCurrentGroup(group)\n                                    resetMessageCount(group.id)\n                                }}\n                                key={group.id}\n                            >\n                                <h2 className=\"groupName\">{group.name}</h2>\n                                <p className=\"lastMessage\">\n                                    <span className=\"latestMessage\">\n                                        {latestMessages[group.id] ? latestMessages[group.id] : ''}\n                                    </span>\n                                    {newMessageCount[group.id] ?\n                                        (\n                                            <span className=\"messageCount center\">\n                                                {newMessageCount[group.id]}\n                                            </span>\n                                        )\n                                        : null\n                                    }\n                                </p>\n                            </li>\n                        ))}\n                </ul>\n            </div>\n            {searchGroup && (<SearchUser hideSearchPopUp={() => setSearchGroup(false)} searchType={CREATE_GROUP} />)}\n            {createNew && (\n                <CreateNewGroup\n                    hideCreateGroup={() => hideAndOpenSearchGroup(false)}\n                    hideAndOpenSearchGroup={() => hideAndOpenSearchGroup(true)}\n                />\n            )}\n            <Toaster time={1} message={toastDetails.message} type={toastDetails.type as toasterType} showToast={toastDetails.showToast} />\n        </section>\n    );\n\n}\n\nexport default GroupChatList;","import firebase from 'firebase'\nimport { GROUP_CHAT, USER_CHAT } from '../Constants/DefaultValues'\nimport { FIREBASE_VALUE } from '../Constants/Firebase'\nimport { getMessageId, uidExtractor } from '../Helpers/CallBackHelper'\nimport { MessageType } from '../Models/Message'\n\nimport FirebaseApp from './FirebaseApp'\n\nexport class FirebaseMessaging {\n  private database: firebase.database.Database\n  private auth: firebase.auth.Auth\n\n  constructor() {\n    this.database = FirebaseApp.database()\n    this.auth = FirebaseApp.auth()\n  }\n\n  private getUserChatRef() {\n    return this.database.ref().child('userchats')\n  }\n\n  private getGroupChatRef() {\n    return this.database.ref().child('/groupchats')\n  }\n\n  private getMessagePathToFriend(friendEmail: string) {\n    const currentUser = this.auth.currentUser?.email || ''\n    return this.getUserChatRef().child(getMessageId(currentUser, friendEmail)).child('/messages/')\n  }\n\n  private getMessageMetaDataPath(friendEmail: string) {\n    const currentUser = this.auth.currentUser?.email || ''\n    return this.getUserChatRef().child(getMessageId(currentUser, friendEmail)).child('/metaData/')\n  }\n\n  private getGroupPath(groupId: string) {\n    return this.getGroupChatRef().child(groupId).child('/messages/')\n  }\n\n  private getMessageMetaDataPathForGroup(groupId: string) {\n    return this.getGroupChatRef().child(groupId).child('/metaData/')\n  }\n\n  public getMessagesOnce(friendEmail: string, messageUpdater: any) {\n    return this.getMessagePathToFriend(friendEmail).on(\n      FIREBASE_VALUE,\n      (datasnapShot) => messageUpdater(datasnapShot, friendEmail),\n      (error) => {\n        // handle error\n      }\n    )\n  }\n\n  public getMessagesForGroup(groupId: string, callback: any) {\n    this.getGroupPath(groupId).on('value', (groupMessages) => callback(groupMessages, groupId))\n  }\n\n  public sendMessage(friendEmail: string, messageDetails: MessageType) {\n    const currentUser = this.auth.currentUser?.email || ''\n    return this.getMessagePathToFriend(friendEmail).update({\n      [messageDetails.timestamp]: {\n        ...messageDetails,\n        from: currentUser,\n      },\n    })\n  }\n\n  public sendMessageToGroup(groupId: string, messageDetails: MessageType) {\n    const currentUser = this.auth.currentUser?.email || ''\n    return this.getGroupPath(groupId).update({\n      [messageDetails.timestamp]: {\n        ...messageDetails,\n        from: currentUser,\n      },\n    })\n  }\n\n  public getLastMessage(friendEmail: string, callback: any) {\n    return this.getMessagePathToFriend(friendEmail)\n      .orderByValue()\n      .limitToLast(1)\n      .on('value', (messages: firebase.database.DataSnapshot) => callback(friendEmail, messages))\n  }\n\n  public getLastMessageOfGroup(groupId: string, callback: any) {\n    return this.getGroupPath(groupId)\n      .orderByValue()\n      .limitToLast(1)\n      .on('value', (messages: firebase.database.DataSnapshot) => callback(groupId, messages))\n  }\n\n  public getLastReadTime(friendEmailOrGroupId: string, chatType: string = USER_CHAT) {\n    const currentUser = uidExtractor(this.auth.currentUser?.email || '')\n    if (chatType === USER_CHAT) {\n      return this.getMessageMetaDataPath(friendEmailOrGroupId)\n        .child('lastMessageReadTime')\n        .child(currentUser)\n        .get()\n    } else if (chatType === GROUP_CHAT) {\n      return this.getMessageMetaDataPathForGroup(friendEmailOrGroupId)\n        .child('lastMessageReadTime')\n        .child(currentUser)\n        .get()\n    }\n  }\n\n  public setLastReadTime(friendEmailOrGroupId: string, chatType: string = USER_CHAT) {\n    const currentUser = uidExtractor(this.auth.currentUser?.email || '')\n    if (chatType === USER_CHAT) {\n      return this.getMessageMetaDataPath(friendEmailOrGroupId)\n        .child('lastMessageReadTime')\n        .child(currentUser)\n        .set(new Date().getTime())\n    } else if (chatType === GROUP_CHAT) {\n      return this.getMessageMetaDataPathForGroup(friendEmailOrGroupId)\n        .child('lastMessageReadTime')\n        .child(currentUser)\n        .set(new Date().getTime())\n    }\n  }\n}\n","import firebase from 'firebase'\nimport { uidExtractor } from '../Helpers/CallBackHelper'\nimport { GroupDetails } from '../Models/CreateGroup'\nimport FirebaseApp from './FirebaseApp'\n\nexport class FirebaseGroup {\n  private firebaseDataBase: firebase.database.Database\n  private firebaseAuth: firebase.auth.Auth\n\n  constructor() {\n    this.firebaseDataBase = FirebaseApp.database()\n    this.firebaseAuth = FirebaseApp.auth()\n  }\n\n  private refForGroup() {\n    return this.firebaseDataBase.ref('/group')\n  }\n\n  private getCurrentUser() {\n    return this.firebaseAuth.currentUser\n  }\n\n  public createGroup(groupDetails: GroupDetails) {\n    return this.refForGroup().update({\n      [groupDetails.id]: {\n        ...groupDetails,\n      },\n    })\n  }\n\n  public getGroups(callBack: any) {\n    this.refForGroup().on('value', callBack)\n  }\n\n  public exitGroup(group: any) {\n    const uid = uidExtractor(this.getCurrentUser()?.email || '')\n    return this.refForGroup()\n      .child(group.id)\n      .update({\n        ...group,\n        userIdList: group.userIdList.filter((id: string) => id !== uid),\n      })\n  }\n}\n","import { uidExtractor } from './CallBackHelper'\n\nexport const extractSearchResults = (\n  searchText: string,\n  searchResults: any,\n  currentUserEmail: string\n) => {\n  Object.keys(searchResults[uidExtractor(currentUserEmail)].friends || {}).forEach(\n    (friendId: string) => (searchResults[friendId] = null)\n  )\n  searchResults[uidExtractor(currentUserEmail)] = null\n  return Object.keys(searchResults)\n    .map((userId) => {\n      if (searchResults[userId]) {\n        if (\n          searchResults[userId].email.includes(searchText) ||\n          searchResults[userId].name.includes(searchText)\n        ) {\n          return searchResults[userId]\n        }\n      }\n      return null\n    })\n    .filter((ele) => ele != null)\n}\n\nexport const jsonToArray = (json: any) => {\n  return Object.keys(json)\n    .map((jsonKey) => json[jsonKey])\n    .filter((jsonValues) => jsonValues)\n}\n\nexport const trimExtraData = (userObj: any) => {\n  const trimedUserData = {} as any\n  Object.keys(userObj).forEach((userid) => {\n    trimedUserData[userid] = {\n      id: userid,\n      name: userObj[userid].name,\n      active: userObj[userid].active,\n      email: userObj[userid].email,\n      profileUrl: userObj[userid].profileUrl,\n      groups: userObj[userid].groups,\n    }\n  })\n  return trimedUserData\n}\n","import { faArrowLeft, faSearch, faUserPlus } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useState } from 'react';\nimport { ERROR_CONSTANT, FAILED_TO_SEND_REQ, FRIEND_REQ_SENT, INFO_CONSTANT, MINIMUM_CHARS, TOAST_CONSTANT, WARNING_CONSTANT } from '../../Constants/ToasterContants';\nimport { FirebaseUser } from '../../Firebase/FirebaseUserDetails';\nimport { callBack, uidExtractor } from '../../Helpers/CallBackHelper';\nimport { extractSearchResults } from '../../Helpers/UserDataHelper';\nimport { SearchUserProps } from '../../Models/SearchUser';\nimport { toasterType } from '../../Models/ToasterModel';\nimport Toaster from '../Toaster';\nimport './SearchUser.css';\n\nconst SearchUser = (props: SearchUserProps) => {\n\n    const [searchResults, setSearchResults] = useState([] as any[]);\n    const [isSearched, setIsSearched] = useState(false);\n    const [searchText, setSearchText] = useState(\"\");\n    const [toastDetails, setToastDetails] = useState(TOAST_CONSTANT);\n\n    const searchUser = () => {\n        if (searchText.length > 3) {\n            const userDetails = new FirebaseUser();\n            const currentUser = userDetails.getCurrentUser();\n            userDetails.getAllUsers()\n                .then((res: any) => {\n                    setSearchResults(extractSearchResults(searchText, res, currentUser?.email || \"\"));\n                })\n                .catch(error => setSearchResults([]));\n            setIsSearched(true);\n        } else {\n            setToastDetails(WARNING_CONSTANT(MINIMUM_CHARS));\n            callBack(1, resetToast);\n        }\n    }\n\n    const sendRequest = (user: any) => {\n        const userDetails = new FirebaseUser();\n        const currentUserEmail = userDetails.getCurrentUser()?.email || \"\";\n        userDetails.sendRequest(uidExtractor(currentUserEmail), uidExtractor(user.email))\n            .then(res => {\n                setToastDetails(INFO_CONSTANT(FRIEND_REQ_SENT(user.name)));\n                callBack(1, resetToast);\n            })\n            .catch(error => {\n                setToastDetails(ERROR_CONSTANT(FAILED_TO_SEND_REQ(user.name)));\n                callBack(1, resetToast);\n            });\n\n    }\n\n    const resetToast = () => setToastDetails(TOAST_CONSTANT);\n\n    return (\n        <div className=\"userSearchPopUP\">\n            <div className=\"searchWrapper\">\n                <div className=\"searchBar\">\n                    <input type=\"search\" placeholder=\"Search for Friends....\" onChange={(e) => setSearchText(e.target.value)} />\n                    <div className=\"center\" onClick={searchUser}>\n                        <FontAwesomeIcon icon={faSearch} />\n                        Search\n                    </div>\n                </div>\n                <div className=\"searchResults\">\n                    {searchResults.length > 0 && isSearched && (\n                        searchResults.map((user, index) => (\n                            <ul className=\"resultsList\" key={index}>\n                                <li className=\"result\">\n                                    <div className=\"requestBox\">\n                                        <img src={user.profileUrl} alt={'profile pic'}/>\n                                        <div className=\"details\">\n                                            <div>\n                                                <span>{user.name}</span>\n                                                <span>&nbsp;{user.email}</span>\n                                            </div>\n                                            <div className=\"buttons\">\n                                                <div className=\"center addFriend\" onClick={() => sendRequest(user)}>\n                                                    <FontAwesomeIcon icon={faUserPlus} />\n                                                    Add\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </li>\n                            </ul>\n                        ))\n                    )}\n                    {isSearched && searchResults.length <= 0 && (\n                        <div className=\"noResults\">\n                            No Results related to&nbsp;<strong>{searchText}</strong>\n                        </div>\n                    )}\n                    {!isSearched && (\n                        <div className=\"notSearched\">\n                            Search for new friends\n                        </div>\n                    )}\n                </div>\n                <div className=\"closeButton\">\n                    <div className=\"center\" onClick={props.hideSearchPopUp}>\n                        <FontAwesomeIcon icon={faArrowLeft} />\n                        Close\n                    </div>\n                </div>\n            </div>\n            <Toaster time={1} message={toastDetails.message} type={toastDetails.type as toasterType} showToast={toastDetails.showToast} />\n        </div>\n    );\n}\n\nexport default SearchUser;","import firebase from 'firebase'\n\nexport const getCountOfLatestMessages = (\n  lastTime: string | number,\n  messages: firebase.database.DataSnapshot\n) => {\n  const lastReadTimeStamp = parseInt(lastTime as string, 10)\n  const AllMessages = messages.val()\n  let count = 0\n  Object.keys(AllMessages).forEach((messageKey: string) => {\n    if (AllMessages[messageKey].timestamp > lastReadTimeStamp) {\n      count++\n    }\n  })\n  return count\n}\n"],"sourceRoot":""}