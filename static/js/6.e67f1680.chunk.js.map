{"version":3,"sources":["Components/UserList/index.tsx","Components/MessageContainer/index.tsx","Firebase/FirebaseMessages.tsx","Helpers/TimeStampHelper.tsx","Firebase/FirebaseGroup.tsx","Helpers/UserDataHelper.tsx","Components/SearchUser/index.tsx","Helpers/MessageHelper.tsx","Components/MessageInput/index.tsx","Components/Messages/index.tsx","Components/UserChatHeader/index.tsx"],"names":["UserList","setActiveUser","activeUser","useState","createNew","setCreateNew","newMessageCount","setNewMessageCount","searchText","setSearchText","TOAST_CONSTANT","toastDetails","setToastDetails","friends","setFriends","users","setUserData","latestMessages","setLatestMessages","selectedUsers","setSelectedusers","currentUser","useRef","resetToast","updateFriendsData","friendList","extractedFriendsList","val","extractedFriends","Object","keys","map","id","updateUserData","updateduserData","trimExtraData","useEffect","length","finalusers","friendId","filter","user","name","toLowerCase","includes","handleMessageUpdate","messages","exists","message","existingLatestMessages","handleMessageCountUpdate","updatedMessages","friendEmailId","firebaselive","FirebaseMessaging","current","email","uidExtractor","setLastReadTime","then","catch","getLastReadTime","res","currentMessageCount","getCountOfLatestMessages","error","ERROR_CONSTANT","NOT_ABLE_SYNC","callBack","firebaseMessages","forEach","getLastMessage","getMessagesOnce","firebaseUser","FirebaseUser","getMyFriends","getLiveUpdateOfUser","getFirends","active","profileUrl","groups","className","onClick","icon","faPlus","faSearch","type","placeholder","onChange","e","target","value","friend","i","friendEmail","setActiveUserGlobal","src","timeAgo","SearchUser","hideSearchPopUp","Toaster","time","showToast","MessageContainer","activeuser","UserChatHeader","Messages","MessageInput","database","auth","this","FirebaseApp","ref","child","getUserChatRef","getMessageId","groupId","getGroupChatRef","messageUpdater","getMessagePathToFriend","on","FIREBASE_VALUE","datasnapShot","callback","getGroupPath","groupMessages","messageDetails","update","timestamp","from","orderByValue","limitToLast","friendEmailOrGroupId","chatType","USER_CHAT","getMessageMetaDataPath","get","GROUP_CHAT","getMessageMetaDataPathForGroup","set","Date","getTime","moment","fromNow","FirebaseGroup","firebaseDataBase","firebaseAuth","groupDetails","refForGroup","group","uid","getCurrentUser","userIdList","extractSearchResults","searchResults","currentUserEmail","userId","ele","jsonToArray","json","jsonKey","jsonValues","userObj","trimedUserData","userid","props","setSearchResults","isSearched","setIsSearched","userDetails","getAllUsers","WARNING_CONSTANT","MINIMUM_CHARS","index","alt","sendRequest","INFO_CONSTANT","FRIEND_REQ_SENT","FAILED_TO_SEND_REQ","faUserPlus","faArrowLeft","lastTime","lastReadTimeStamp","parseInt","AllMessages","count","messageKey","activeGroup","inputRef","extractAndSendMessage","inputEle","messager","undefined","sendMessage","sendMessageToGroup","onKeyPress","key","role","faTelegramPlane","setMessages","snapshot","arrivedMessages","receivedMessages","messageStamp","sort","a","b","getMessagesForGroup","meesageFetching","document","querySelector","scrollIntoView","handleRestGroup","dropDown","setDropDown","olddropDown","faEllipsisV","exitGroup","removeFromGroup"],"mappings":"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","file":"static/js/6.e67f1680.chunk.js","sourcesContent":["import { faPlus, faSearch } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { useEffect, useRef, useState } from 'react'\nimport firebase from 'firebase'\n\nimport { ERROR_CONSTANT, NOT_ABLE_SYNC, TOAST_CONSTANT } from '../../Constants/ToasterContants'\nimport { FirebaseUser } from '../../Firebase/FirebaseUserDetails'\nimport { callBack, uidExtractor } from '../../Helpers/CallBackHelper'\nimport { timeAgo } from '../../Helpers/TimeStampHelper'\nimport { UserListProps, UserTrimedData } from '../../Models/SearchUser'\nimport { toasterType } from '../../Models/ToasterModel'\nimport SearchUser from '../SearchUser'\nimport Toaster from '../Toaster'\n\nimport './UserList.css'\nimport { trimExtraData } from '../../Helpers/UserDataHelper'\nimport { FirebaseMessaging } from '../../Firebase/FirebaseMessages'\nimport { getCountOfLatestMessages } from '../../Helpers/MessageHelper'\n\nconst UserList = ({ setActiveUser, activeUser }: UserListProps) => {\n  const [createNew, setCreateNew] = useState(false)\n  const [newMessageCount, setNewMessageCount] = useState({} as any)\n  const [searchText, setSearchText] = useState('')\n  const [toastDetails, setToastDetails] = useState(TOAST_CONSTANT)\n  const [friends, setFriends] = useState([] as any)\n  const [users, setUserData] = useState({} as any)\n  const [latestMessages, setLatestMessages] = useState({} as any)\n  const [selectedUsers, setSelectedusers] = useState([] as UserTrimedData[])\n  const currentUser = useRef(activeUser)\n\n  const resetToast = () => setToastDetails(TOAST_CONSTANT)\n\n  const updateFriendsData = (friendList: firebase.database.DataSnapshot) => {\n    const extractedFriendsList = friendList.val() || {}\n    const extractedFriends = Object.keys(extractedFriendsList).map((id) => id)\n    setFriends(extractedFriends)\n  }\n\n  const updateUserData = (updateduserData: firebase.database.DataSnapshot) => {\n    setUserData(trimExtraData(updateduserData.val()))\n  }\n\n  const getFirends = () => {\n    const firebaseUser = new FirebaseUser()\n    firebaseUser.getMyFriends(updateFriendsData)\n    firebaseUser.getLiveUpdateOfUser(updateUserData)\n  }\n\n  useEffect(() => {\n    if (friends.length > 0 && Object.keys(users).length > 0) {\n      const finalusers = friends\n        .map((friendId: string) => users[friendId])\n        .filter((user: UserTrimedData) => user.name.toLowerCase().includes(searchText.toLowerCase()))\n      setSelectedusers(finalusers)\n      if (users[activeUser.id]) setActiveUser(users[activeUser.id])\n    }\n  }, [friends, users, searchText])\n  \n  const handleMessageUpdate = (friendId: string, messages: firebase.database.DataSnapshot) => {\n    if (messages.exists()) {\n      const message = messages.val()[Object.keys(messages.val())[0]];\n      setLatestMessages((existingLatestMessages: any) => ({\n        ...existingLatestMessages,\n        [friendId]: message.message,\n      }))\n    }\n  }\n\n  const handleMessageCountUpdate =  (updatedMessages: firebase.database.DataSnapshot, friendEmailId: string) => {\n    if(updatedMessages.exists()) {\n      const firebaselive = new FirebaseMessaging()\n      if(currentUser.current.email && (uidExtractor(currentUser.current.email) === friendEmailId)) {\n        firebaselive.setLastReadTime(friendEmailId)?.then().catch();\n      } else {\n        firebaselive.getLastReadTime(friendEmailId)?.then(res => {\n          setNewMessageCount((currentMessageCount: any) => ({\n            ...currentMessageCount,\n            [uidExtractor(friendEmailId)]: getCountOfLatestMessages(res.val() || 0, updatedMessages),\n          }));\n        }).catch(error => {\n          setToastDetails(ERROR_CONSTANT(NOT_ABLE_SYNC))\n          callBack(1, resetToast)\n        })\n      }\n    }\n  }\n\n  useEffect(() => {\n    const firebaseMessages = new FirebaseMessaging()\n    friends.forEach((friendId: string) => {\n      firebaseMessages.getLastMessage(friendId, handleMessageUpdate)\n      firebaseMessages.getMessagesOnce(friendId, handleMessageCountUpdate);\n    })\n  }, [friends])\n\n  const resetMessageCount = (friendEmail: string) =>\n    setNewMessageCount({ ...newMessageCount, [friendEmail]: 0 })\n\n  const setActiveUserGlobal = (friend: UserTrimedData) => {\n    if(currentUser.current.id) {\n      const firebaseMessaging = new FirebaseMessaging()\n      firebaseMessaging.setLastReadTime(currentUser.current.email);\n    }\n    setActiveUser(friend)\n    currentUser.current = friend\n  }\n\n  useEffect(() => {\n    getFirends()\n    return () => {\n      const firebaselive = new FirebaseMessaging()\n      if(currentUser.current.id) {\n        firebaselive.setLastReadTime(currentUser.current.id)?.then().catch();\n      }\n      currentUser.current = {\n        id: '',\n        email: '',\n        name: '',\n        active: false,\n        profileUrl: '',\n        groups: {}\n      };\n    };\n  }, [])\n\n  return (\n    <section className=\"userListWrapper\">\n      <div className=\"headingBar\">\n        <div className=\"heading\">\n          <h1>Chats</h1>\n          <span>Personal Chats</span>\n        </div>\n        <div className=\"createNew\" onClick={() => setCreateNew(true)}>\n          <span className=\"plus\">\n            <FontAwesomeIcon icon={faPlus} />\n          </span>\n          <span className=\"text\">Create New Chat</span>\n        </div>\n      </div>\n      <div className=\"chatUtils\">\n        <div className=\"searchBar center\">\n          <span className=\"searchIcon center\">\n            <FontAwesomeIcon icon={faSearch} />\n          </span>\n          <input\n            type=\"search\"\n            placeholder=\"Search Name...\"\n            onChange={(e) => setSearchText(e.target.value)}\n          />\n        </div>\n      </div>\n      <div className=\"users\">\n        <ul>\n          {selectedUsers.map((friend: UserTrimedData, i: number) => (\n            <li\n              onClick={() => {\n                setActiveUserGlobal(friend)\n                resetMessageCount(friend.id)\n              }}\n              className={friend.email === activeUser.email ? 'active' : ''}\n              key={i}\n            >\n              <div className=\"userInfo\">\n                <img\n                  src={\n                    friend.profileUrl ? friend.profileUrl :\n                    'https://socialtelecast.com/wp-content/uploads/2020/04/%C3%9Arsula-Corber%C3%B3.jpg'\n                  }\n                />\n                <span className=\"userName center\">\n                  <span className=\"name\">{friend.name}</span>\n                  <span className=\"status\">\n                    <span className={'notActiveUser'} />\n                    {friend.active === true ? 'active' : timeAgo(friend.active as any)}\n                  </span>\n                </span>\n              </div>\n              <div className=\"messageData\">\n                <p>{latestMessages[friend.id]}</p>\n                {newMessageCount[friend.id] > 0 ? (\n                  <span className=\"messageCount center\">{newMessageCount[friend.id]}</span>\n                ) : // <span className=\"messageCount nonotification\"></span>\n                null}\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n      {createNew && <SearchUser hideSearchPopUp={() => setCreateNew(false)} />}\n      <Toaster\n        time={1}\n        message={toastDetails.message}\n        type={toastDetails.type as toasterType}\n        showToast={toastDetails.showToast}\n      />\n    </section>\n  )\n}\n\nexport default UserList\n","import { useState } from 'react';\nimport MessageInput from '../MessageInput';\nimport Messages from '../Messages';\nimport UserChatHeader from '../UserChatHeader';\nimport UserList from '../UserList';\nimport './MessageContainer.css';\n\nconst MessageContainer = () => {\n\n    const [activeuser, setActiveUser] = useState({} as any);\n\n    return (\n        <section className=\"messageBlock\">\n            <div className=\"usersList\">\n                <UserList setActiveUser={setActiveUser} activeUser={activeuser} />\n            </div>\n            <div className=\"chatContainer\">\n                {Object.keys(activeuser).length > 0 && (\n                    <>\n                        <div className=\"chatHeader\">\n                            <UserChatHeader activeUser={activeuser} />\n                        </div>\n                        <div className=\"messages\">\n                            <Messages activeUser={activeuser} />\n                        </div>\n                        <div className=\"messageInput\">\n                            <MessageInput activeUser={activeuser} />\n                        </div>\n                    </>\n                )}\n                {Object.keys(activeuser).length <= 0 && ( \n                    <div className=\"typewriter center\">\n                        <h1>Choose friend to chat...</h1>\n                    </div>\n                )}\n            </div>\n        </section>\n    );\n}\n\nexport default MessageContainer;","import firebase from 'firebase'\nimport { GROUP_CHAT, USER_CHAT } from '../Constants/DefaultValues'\nimport { FIREBASE_VALUE } from '../Constants/Firebase'\nimport { getMessageId, uidExtractor } from '../Helpers/CallBackHelper'\nimport { MessageType } from '../Models/Message'\n\nimport FirebaseApp from './FirebaseApp'\n\nexport class FirebaseMessaging {\n  private database: firebase.database.Database\n  private auth: firebase.auth.Auth\n\n  constructor() {\n    this.database = FirebaseApp.database()\n    this.auth = FirebaseApp.auth()\n  }\n\n  private getUserChatRef() {\n    return this.database.ref().child('userchats')\n  }\n\n  private getGroupChatRef() {\n    return this.database.ref().child('/groupchats')\n  }\n\n  private getMessagePathToFriend(friendEmail: string) {\n    const currentUser = this.auth.currentUser?.email || ''\n    return this.getUserChatRef().child(getMessageId(currentUser, friendEmail)).child('/messages/')\n  }\n\n  private getMessageMetaDataPath(friendEmail: string) {\n    const currentUser = this.auth.currentUser?.email || ''\n    return this.getUserChatRef().child(getMessageId(currentUser, friendEmail)).child('/metaData/')\n  }\n\n  private getGroupPath(groupId: string) {\n    return this.getGroupChatRef().child(groupId).child('/messages/')\n  }\n\n  private getMessageMetaDataPathForGroup(groupId: string) {\n    return this.getGroupChatRef().child(groupId).child('/metaData/')\n  }\n\n  public getMessagesOnce(friendEmail: string, messageUpdater: any) {\n    return this.getMessagePathToFriend(friendEmail).on(\n      FIREBASE_VALUE,\n      (datasnapShot) => messageUpdater(datasnapShot, friendEmail),\n      (error) => {\n        // handle error\n      }\n    )\n  }\n\n  public getMessagesForGroup(groupId: string, callback: any) {\n    this.getGroupPath(groupId).on('value', (groupMessages) => callback(groupMessages, groupId))\n  }\n\n  public sendMessage(friendEmail: string, messageDetails: MessageType) {\n    const currentUser = this.auth.currentUser?.email || ''\n    return this.getMessagePathToFriend(friendEmail).update({\n      [messageDetails.timestamp]: {\n        ...messageDetails,\n        from: currentUser,\n      },\n    })\n  }\n\n  public sendMessageToGroup(groupId: string, messageDetails: MessageType) {\n    const currentUser = this.auth.currentUser?.email || ''\n    return this.getGroupPath(groupId).update({\n      [messageDetails.timestamp]: {\n        ...messageDetails,\n        from: currentUser,\n      },\n    })\n  }\n\n  public getLastMessage(friendEmail: string, callback: any) {\n    return this.getMessagePathToFriend(friendEmail)\n      .orderByValue()\n      .limitToLast(1)\n      .on('value', (messages: firebase.database.DataSnapshot) => callback(friendEmail, messages))\n  }\n\n  public getLastMessageOfGroup(groupId: string, callback: any) {\n    return this.getGroupPath(groupId)\n      .orderByValue()\n      .limitToLast(1)\n      .on('value', (messages: firebase.database.DataSnapshot) => callback(groupId, messages))\n  }\n\n  public getLastReadTime(friendEmailOrGroupId: string, chatType: string = USER_CHAT) {\n    const currentUser = uidExtractor(this.auth.currentUser?.email || '')\n    if (chatType === USER_CHAT) {\n      return this.getMessageMetaDataPath(friendEmailOrGroupId)\n        .child('lastMessageReadTime')\n        .child(currentUser)\n        .get()\n    } else if (chatType === GROUP_CHAT) {\n      return this.getMessageMetaDataPathForGroup(friendEmailOrGroupId)\n        .child('lastMessageReadTime')\n        .child(currentUser)\n        .get()\n    }\n  }\n\n  public setLastReadTime(friendEmailOrGroupId: string, chatType: string = USER_CHAT) {\n    const currentUser = uidExtractor(this.auth.currentUser?.email || '')\n    if (chatType === USER_CHAT) {\n      return this.getMessageMetaDataPath(friendEmailOrGroupId)\n        .child('lastMessageReadTime')\n        .child(currentUser)\n        .set(new Date().getTime())\n    } else if (chatType === GROUP_CHAT) {\n      return this.getMessageMetaDataPathForGroup(friendEmailOrGroupId)\n        .child('lastMessageReadTime')\n        .child(currentUser)\n        .set(new Date().getTime())\n    }\n  }\n}\n","import moment from 'moment'\n\nexport const timeAgo = (timestamp: number) => {\n  return timestamp ? moment(new Date(timestamp)).fromNow() : null\n}\n","import firebase from 'firebase'\nimport { uidExtractor } from '../Helpers/CallBackHelper'\nimport { GroupDetails } from '../Models/CreateGroup'\nimport FirebaseApp from './FirebaseApp'\n\nexport class FirebaseGroup {\n  private firebaseDataBase: firebase.database.Database\n  private firebaseAuth: firebase.auth.Auth\n\n  constructor() {\n    this.firebaseDataBase = FirebaseApp.database()\n    this.firebaseAuth = FirebaseApp.auth()\n  }\n\n  private refForGroup() {\n    return this.firebaseDataBase.ref('/group')\n  }\n\n  private getCurrentUser() {\n    return this.firebaseAuth.currentUser\n  }\n\n  public createGroup(groupDetails: GroupDetails) {\n    return this.refForGroup().update({\n      [groupDetails.id]: {\n        ...groupDetails,\n      },\n    })\n  }\n\n  public getGroups(callBack: any) {\n    this.refForGroup().on('value', callBack)\n  }\n\n  public exitGroup(group: any) {\n    const uid = uidExtractor(this.getCurrentUser()?.email || '')\n    return this.refForGroup()\n      .child(group.id)\n      .update({\n        ...group,\n        userIdList: group.userIdList.filter((id: string) => id !== uid),\n      })\n  }\n}\n","import { uidExtractor } from './CallBackHelper'\n\nexport const extractSearchResults = (\n  searchText: string,\n  searchResults: any,\n  currentUserEmail: string\n) => {\n  Object.keys(searchResults[uidExtractor(currentUserEmail)].friends || {}).forEach(\n    (friendId: string) => (searchResults[friendId] = null)\n  )\n  searchResults[uidExtractor(currentUserEmail)] = null\n  return Object.keys(searchResults)\n    .map((userId) => {\n      if (searchResults[userId]) {\n        if (\n          searchResults[userId].email.includes(searchText) ||\n          searchResults[userId].name.includes(searchText)\n        ) {\n          return searchResults[userId]\n        }\n      }\n      return null\n    })\n    .filter((ele) => ele != null)\n}\n\nexport const jsonToArray = (json: any) => {\n  return Object.keys(json)\n    .map((jsonKey) => json[jsonKey])\n    .filter((jsonValues) => jsonValues)\n}\n\nexport const trimExtraData = (userObj: any) => {\n  const trimedUserData = {} as any\n  Object.keys(userObj).forEach((userid) => {\n    trimedUserData[userid] = {\n      id: userid,\n      name: userObj[userid].name,\n      active: userObj[userid].active,\n      email: userObj[userid].email,\n      profileUrl: userObj[userid].profileUrl,\n      groups: userObj[userid].groups,\n    }\n  })\n  return trimedUserData\n}\n","import { faArrowLeft, faSearch, faUserPlus } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useState } from 'react';\nimport { ERROR_CONSTANT, FAILED_TO_SEND_REQ, FRIEND_REQ_SENT, INFO_CONSTANT, MINIMUM_CHARS, TOAST_CONSTANT, WARNING_CONSTANT } from '../../Constants/ToasterContants';\nimport { FirebaseUser } from '../../Firebase/FirebaseUserDetails';\nimport { callBack, uidExtractor } from '../../Helpers/CallBackHelper';\nimport { extractSearchResults } from '../../Helpers/UserDataHelper';\nimport { SearchUserProps } from '../../Models/SearchUser';\nimport { toasterType } from '../../Models/ToasterModel';\nimport Toaster from '../Toaster';\nimport './SearchUser.css';\n\nconst SearchUser = (props: SearchUserProps) => {\n\n    const [searchResults, setSearchResults] = useState([] as any[]);\n    const [isSearched, setIsSearched] = useState(false);\n    const [searchText, setSearchText] = useState(\"\");\n    const [toastDetails, setToastDetails] = useState(TOAST_CONSTANT);\n\n    const searchUser = () => {\n        if (searchText.length > 3) {\n            const userDetails = new FirebaseUser();\n            const currentUser = userDetails.getCurrentUser();\n            userDetails.getAllUsers()\n                .then((res: any) => {\n                    setSearchResults(extractSearchResults(searchText, res, currentUser?.email || \"\"));\n                })\n                .catch(error => setSearchResults([]));\n            setIsSearched(true);\n        } else {\n            setToastDetails(WARNING_CONSTANT(MINIMUM_CHARS));\n            callBack(1, resetToast);\n        }\n    }\n\n    const sendRequest = (user: any) => {\n        const userDetails = new FirebaseUser();\n        const currentUserEmail = userDetails.getCurrentUser()?.email || \"\";\n        userDetails.sendRequest(uidExtractor(currentUserEmail), uidExtractor(user.email))\n            .then(res => {\n                setToastDetails(INFO_CONSTANT(FRIEND_REQ_SENT(user.name)));\n                callBack(1, resetToast);\n            })\n            .catch(error => {\n                setToastDetails(ERROR_CONSTANT(FAILED_TO_SEND_REQ(user.name)));\n                callBack(1, resetToast);\n            });\n\n    }\n\n    const resetToast = () => setToastDetails(TOAST_CONSTANT);\n\n    return (\n        <div className=\"userSearchPopUP\">\n            <div className=\"searchWrapper\">\n                <div className=\"searchBar\">\n                    <input type=\"search\" placeholder=\"Search for Friends....\" onChange={(e) => setSearchText(e.target.value)} />\n                    <div className=\"center\" onClick={searchUser}>\n                        <FontAwesomeIcon icon={faSearch} />\n                        Search\n                    </div>\n                </div>\n                <div className=\"searchResults\">\n                    {searchResults.length > 0 && isSearched && (\n                        searchResults.map((user, index) => (\n                            <ul className=\"resultsList\" key={index}>\n                                <li className=\"result\">\n                                    <div className=\"requestBox\">\n                                        <img src={user.profileUrl} alt={'profile pic'}/>\n                                        <div className=\"details\">\n                                            <div>\n                                                <span>{user.name}</span>\n                                                <span>&nbsp;{user.email}</span>\n                                            </div>\n                                            <div className=\"buttons\">\n                                                <div className=\"center addFriend\" onClick={() => sendRequest(user)}>\n                                                    <FontAwesomeIcon icon={faUserPlus} />\n                                                    Add\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </li>\n                            </ul>\n                        ))\n                    )}\n                    {isSearched && searchResults.length <= 0 && (\n                        <div className=\"noResults\">\n                            No Results related to&nbsp;<strong>{searchText}</strong>\n                        </div>\n                    )}\n                    {!isSearched && (\n                        <div className=\"notSearched\">\n                            Search for new friends\n                        </div>\n                    )}\n                </div>\n                <div className=\"closeButton\">\n                    <div className=\"center\" onClick={props.hideSearchPopUp}>\n                        <FontAwesomeIcon icon={faArrowLeft} />\n                        Close\n                    </div>\n                </div>\n            </div>\n            <Toaster time={1} message={toastDetails.message} type={toastDetails.type as toasterType} showToast={toastDetails.showToast} />\n        </div>\n    );\n}\n\nexport default SearchUser;","import firebase from 'firebase'\n\nexport const getCountOfLatestMessages = (\n  lastTime: string | number,\n  messages: firebase.database.DataSnapshot\n) => {\n  const lastReadTimeStamp = parseInt(lastTime as string, 10)\n  const AllMessages = messages.val()\n  let count = 0\n  Object.keys(AllMessages).forEach((messageKey: string) => {\n    if (AllMessages[messageKey].timestamp > lastReadTimeStamp) {\n      count++\n    }\n  })\n  return count\n}\n","import { faTelegramPlane } from '@fortawesome/free-brands-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useRef } from 'react';\nimport { FirebaseMessaging } from '../../Firebase/FirebaseMessages';\nimport { MessageType } from '../../Models/Message';\nimport { MessagingProps } from '../../Models/MessagingModels';\nimport './MessageInput.css';\n\nconst MessageInput = ({ activeUser, activeGroup }: MessagingProps) => {\n\n    const inputRef = useRef(null);\n\n    const sendMessage = (message: string) => {\n        const messager = new FirebaseMessaging();\n        const messageDetails: MessageType = {\n            from: \"\",\n            message,\n            timestamp: new Date().getTime(),\n        }\n        if(message === '' || message === undefined || message === null) return;\n        if(activeUser) {\n            messager.sendMessage(activeUser?.email || '', messageDetails).then().catch();\n        }\n        if(activeGroup) {\n            messager.sendMessageToGroup(activeGroup.id, messageDetails).then().catch();\n        }\n    }\n\n    const onSend = (e: any) => {\n        if(e.key !== \"Enter\") return;\n        extractAndSendMessage();\n    }\n\n    const extractAndSendMessage = () => {\n        const inputEle: any = inputRef?.current;\n        const Message = inputEle && inputEle['value'];\n        sendMessage(Message);\n        if(inputEle) { inputEle['value'] = ''; }\n    }\n\n    return (\n        <div className=\"messageInputWrapper\">\n            <div className=\"inputWrapper\">\n                <input type=\"text\" placeholder=\"Type your message here....\" ref={inputRef} onKeyPress={onSend} />\n                <span className=\"sendicon\" role=\"button\" onClick={extractAndSendMessage}>\n                    <FontAwesomeIcon icon={faTelegramPlane} />\n                </span>\n            </div>\n        </div>\n    )\n}\n\nexport default MessageInput;","import { useEffect, useRef, useState } from 'react';\nimport firebase from \"firebase\";\n\nimport { FirebaseMessaging } from '../../Firebase/FirebaseMessages';\nimport { MessageType } from '../../Models/Message';\nimport { MessagingProps } from '../../Models/MessagingModels';\n\nimport './Messages.css';\nimport { timeAgo } from '../../Helpers/TimeStampHelper';\nimport { UserTrimedData } from '../../Models/SearchUser';\nimport { FirebaseUser } from '../../Firebase/FirebaseUserDetails';\n\nconst Messages = ({ activeUser, activeGroup }: MessagingProps) => {\n\n    const [messages, setMessages] = useState([] as Array<MessageType>);\n    const currentUser = useRef({} as UserTrimedData);\n\n    const messageUpdater = (snapshot: firebase.database.DataSnapshot) => {\n        if (snapshot.exists()) {\n            const arrivedMessages = snapshot.val() || {};\n            if (Object.keys(arrivedMessages).length > 0) {\n                const receivedMessages = Object.keys(arrivedMessages).map(messageStamp => arrivedMessages[messageStamp]);\n                setMessages(receivedMessages.sort((a: MessageType, b: MessageType) => (a.timestamp - b.timestamp)));\n            }\n        }\n    }\n\n    const meesageFetching = () => {\n        const firebaseMessages = new FirebaseMessaging();\n        if(activeUser?.email) {\n            firebaseMessages.getMessagesOnce(activeUser?.email || '', messageUpdater);\n        } else if (activeGroup?.id) {\n            firebaseMessages.getMessagesForGroup(activeGroup.id || '', messageUpdater);\n        }\n    }\n\n    useEffect(() => {\n        setMessages([] as Array<MessageType>);\n        meesageFetching();\n    }, [activeUser, activeGroup]);\n\n    useEffect(() => {\n        document.querySelector<HTMLInputElement>('#activeMessage')?.scrollIntoView();\n     }, [messages]);\n\n     useEffect(() => {\n        const firebaseUser = new FirebaseUser();\n        currentUser.current = { ...(firebaseUser.getCurrentUser() as unknown as UserTrimedData) };\n     }, []);\n\n    return (\n        <div className=\"messageWrapper\">\n            <ul className=\"messagesList\">\n                {messages.map((message, index) => (\n                    <li \n                        className={message.from !== currentUser.current?.email ? \"moveLeft\" : \"moveRight\"} \n                        key={index} \n                        id={index === messages.length -1 ? \"activeMessage\" : \"\"}\n                    >\n                        <div className={message.from !== currentUser.current?.email ? \"sentByFriend\" : \"sentByMe\"}>\n                            {message.message}\n                        </div>\n                        <span className=\"timeago\">{timeAgo(message.timestamp)}</span>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default Messages;","import { faEllipsisV } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useState } from 'react';\nimport { FirebaseGroup } from '../../Firebase/FirebaseGroup';\nimport { FirebaseUser } from '../../Firebase/FirebaseUserDetails';\nimport { timeAgo } from '../../Helpers/TimeStampHelper';\nimport { MessagingProps } from '../../Models/MessagingModels';\nimport './UserchatHeader.css';\n\nconst UserChatHeader = ({ activeUser, activeGroup, handleRestGroup }: MessagingProps) => {\n\n    const [dropDown, setDropDown] = useState(false);\n\n    const exitGroup = () => {\n        const firebaseGroup = new FirebaseGroup();\n        firebaseGroup.exitGroup(activeGroup)\n            .then(res => {\n                const firebaseUser = new FirebaseUser();\n                firebaseUser.removeFromGroup(activeGroup?.id || '').then(() => {\n                    handleRestGroup();\n                }).catch();\n            })\n            .catch(error => {\n                // handle error\n            })\n    }\n\n    return (\n        <section className=\"userHeader center\">\n            <div className=\"headerBar\">\n                {activeUser && (\n                    <img src={activeUser?.profileUrl || ''} alt={\"profile pic\"} />\n                )}\n                <div className=\"profile center\">\n                    <div className=\"details\">\n                        <span className=\"name\">{activeUser?.name || activeGroup?.name}</span>\n                        <span className=\"status\">\n                            <span className=\"activeUser\"></span>\n                            {activeUser?.active === true ? 'active' : timeAgo(activeUser?.active || 0)}\n                        </span>\n                    </div>\n                    <div className=\"options\">\n                        <div className=\"tripleDot center button\" onClick={() => setDropDown(olddropDown => !olddropDown)}>\n                            <FontAwesomeIcon icon={faEllipsisV} />\n                        </div>\n                        {dropDown && (\n                            <div className=\"dropdown\">\n                                <span className=\"button center\" onClick={exitGroup}>Exit Group</span>\n                            </div>\n                        )}\n                    </div>\n                </div>\n            </div>\n        </section>\n    );\n}\n\nexport default UserChatHeader;"],"sourceRoot":""}